◊namespace Adamant.Tools.Compiler.Bootstrap.CST;
◊base 'ISyntax';
◊prefix I;
◊suffix Syntax;
◊list FixedList;
◊using System.Numerics;
◊using Adamant.Tools.Compiler.Bootstrap.Core;
◊using Adamant.Tools.Compiler.Bootstrap.Framework;
◊using Adamant.Tools.Compiler.Bootstrap.IntermediateLanguage;
◊using Adamant.Tools.Compiler.Bootstrap.Metadata;
◊using Adamant.Tools.Compiler.Bootstrap.Names;
◊using Adamant.Tools.Compiler.Bootstrap.Symbols;
◊using Adamant.Tools.Compiler.Bootstrap.Tokens;
◊using Adamant.Tools.Compiler.Bootstrap.Types;

'ISyntax' = Span:TextSpan;
AbstractMethodDeclaration: MethodDeclaration;
Argument;
AssignableExpression: Expression;
AssignmentExpression: Expression = Operator:AssignmentOperator;
AssociatedFunctionDeclaration: MemberDeclaration, ConcreteCallableDeclaration = ReturnType:Type? ReturnDataType:DataTypePromise;
BinaryOperatorExpression: Expression = Operator:BinaryOperator;
BlockExpression: Expression, BlockOrResult, BodyOrBlock;
BlockOrResult: ElseClause;
BodyOrBlock = Statements:Statement*;
BodyStatement: Statement;
Body: BodyOrBlock = Statements:BodyStatement*;
BoolLiteralExpression: LiteralExpression = Value:bool;
BorrowExpression: Expression;
BreakExpression: Expression;
CallableDeclaration: EntityDeclaration, IFunctionMetadata = ReachabilityAnnotations:ReachabilityAnnotation*;
CallableName = Name:MaybeQualifiedName;
CanReachAnnotation: ReachabilityAnnotation = CanReach:NameExpression*;
CapabilityType: Type = ReferentType:Type Capability:ReferenceCapability;
ClassDeclaration: NonMemberEntityDeclaration = MutableModifier:IMutableKeywordToken? Name:SimpleName Members:MemberDeclaration*;
CompilationUnit = CodeFile ImplicitNamespaceName:RootName UsingDirectives:UsingDirective* Declarations:NonMemberDeclaration* EntityDeclarations:EntityDeclaration* Diagnostics:Diagnostic*;
ConcreteCallableDeclaration: CallableDeclaration = Body;
ConcreteMethodDeclaration: MethodDeclaration, ConcreteCallableDeclaration;
ConstructorDeclaration: MemberDeclaration, ConcreteCallableDeclaration = ImplicitSelfParameter:SelfParameter;
ConstructorParameter: Parameter;
Declaration = File:CodeFile NameSpan:TextSpan Symbol:Promise<Symbol?>;
ElseClause;
EntityDeclaration: Declaration = AccessModifier:IAccessModifierToken?;
ExpressionStatement: BodyStatement;
Expression;
FieldAccessExpression: AssignableExpression = AccessOperator Field:NameExpression;
FieldDeclaration: MemberDeclaration = TypeSyntax:Type DataType:DataTypePromise;
FieldParameter: Parameter, ConstructorParameter = FieldName:SimpleName DefaultValue:Expression?;
ForeachExpression: Expression = VariableName:SimpleName TypeSyntax:Type? Block:BlockExpression;
FunctionDeclaration: NonMemberEntityDeclaration, ConcreteCallableDeclaration = IsExternalFunction:bool ReturnType:Type? ReturnDataType:DataTypePromise;
FunctionInvocationExpression: InvocationExpression = FunctionNameSyntax:CallableName;
IfExpression: Expression, ElseClause = ThenBlock:BlockOrResult ElseClause?;
ImplicitConversionExpression: Expression = Expression DataType;
ImplicitImmutabilityConversionExpression: ImplicitConversionExpression;
ImplicitNoneConversionExpression: ImplicitConversionExpression = ConvertToType:'OptionalType';
ImplicitNumericConversionExpression: ImplicitConversionExpression = ConvertToType:NumericType;
ImplicitOptionalConversionExpression: ImplicitConversionExpression = ConvertToType:'OptionalType';
IntegerLiteralExpression: LiteralExpression = Value:BigInteger;
InvocationExpression: Expression = FullName:MaybeQualifiedName Arguments:Argument*;
LiteralExpression: Expression;
LoopExpression: Expression = Block:BlockExpression;
MemberDeclaration: EntityDeclaration = DeclaringClass:ClassDeclaration Name:SimpleName;
MethodDeclaration: MemberDeclaration, CallableDeclaration = SelfParameter ReturnType:Type? ReturnDataType:DataTypePromise;
MethodInvocationExpression: InvocationExpression = MethodNameSyntax:CallableName;
MoveExpression: Expression;
NamedParameter: Parameter, ConstructorParameter = TypeSyntax:Type DefaultValue:Expression?;
NameExpression: AssignableExpression, IHasContainingScope = Name:SimpleName;
NamespaceDeclaration: NonMemberDeclaration, Declaration = IsGlobalQualified:bool Name:MaybeQualifiedName FullName:MaybeQualifiedName UsingDirectives:UsingDirective* Declarations:NonMemberDeclaration*;
NewObjectExpression: Expression = TypeSyntax:TypeName ConstructorName:CallableName? Arguments:Argument*;
NextExpression: Expression;
NoneLiteralExpression: LiteralExpression;
NonMemberDeclaration: Declaration;
NonMemberEntityDeclaration: EntityDeclaration, NonMemberDeclaration;
OptionalType: Type = Referent:Type;
Parameter: 'ISyntax', IBindingMetadata = Name:SimpleName Unused:bool DataType:DataTypePromise;
ReachabilityAnnotation;
ReachableFromAnnotation: ReachabilityAnnotation = ReachableFrom:NameExpression*;
ResultStatement: Statement, BlockOrResult;
ReturnExpression: Expression;
SelfExpression: Expression, IHasContainingScope = IsImplicit:bool;
SelfParameter: Parameter = MutableSelf:bool;
ShareExpression: Expression = SharedSymbol:IBindingMetadata;
Statement;
StringLiteralExpression: LiteralExpression = Value:string;
TypeName: Type, IHasContainingScope;
Type;
UnaryOperatorExpression: Expression = Fixity:UnaryOperatorFixity Operator:UnaryOperator;
UnsafeExpression: Expression;
UsingDirective = Name:MaybeQualifiedName;
VariableDeclarationStatement: BodyStatement, IBindingMetadata = NameSpan:TextSpan Name:SimpleName TypeSyntax:Type? InferMutableType:bool;
WhileExpression: Expression = Block:BlockExpression;
