◊namespace Adamant.Tools.Compiler.Bootstrap.CST.Gen;
◊base 'ISyntax';
◊prefix I;
◊suffix Syntax;
◊list FixedList;
◊using System.Numerics;
◊using Adamant.Tools.Compiler.Bootstrap.Core;
◊using Adamant.Tools.Compiler.Bootstrap.Framework;
◊using Adamant.Tools.Compiler.Bootstrap.IntermediateLanguage;
◊using Adamant.Tools.Compiler.Bootstrap.Metadata;
◊using Adamant.Tools.Compiler.Bootstrap.Names;
◊using Adamant.Tools.Compiler.Bootstrap.Tokens;
◊using Adamant.Tools.Compiler.Bootstrap.Types;

'ISyntax' = Span:TextSpan;
AbstractMethodDeclaration: MethodDeclaration;
Argument = Expression;
AssignableExpression: Expression;
AssignmentExpression: Expression = LeftOperand:AssignableExpression Operator:AssignmentOperator RightOperand:Expression;
AssociatedFunctionDeclaration: MemberDeclaration, ConcreteCallableDeclaration = NewParameters:NamedParameter* ReturnTypeSyntax:Type? ReturnType:DataTypePromise;
BinaryOperatorExpression: Expression = LeftOperand:Expression Operator:BinaryOperator RightOperand:Expression;
BlockExpression: Expression, BlockOrResult, BodyOrBlock;
BlockOrResult: ElseClause;
BodyOrBlock = Statements:Statement*;
BodyStatement = Statement;
Body: BodyOrBlock = Statements:BodyStatement*;
BoolLiteralExpression: LiteralExpression = Value:bool;
BorrowExpression: Expression = Referent:Expression BorrowedFromBinding:IBindingMetadata;
BreakExpression: Expression = Value:Expression;
CallableDeclaration: EntityDeclaration, IFunctionMetadata = NewParameters:Parameter* ReachabilityAnnotations:ReachabilityAnnotation*;
CallableName = Name ReferencedFunctionMetadata:IFunctionMetadata?;
CanReachAnnotation: ReachabilityAnnotation = CanReach:NameExpression*;
CapabilityType: Type = ReferentType:Type Capability:ReferenceCapability;
ClassDeclaration: NonMemberEntityDeclaration = MutableModifier:IMutableKeywordToken? Name:SimpleName Members:MemberDeclaration* DeclaresType:DataTypePromise;
CompilationUnit = File:CodeFile ImplicitNamespaceName:RootName UsingDirectives:UsingDirective* Declarations:NonMemberDeclaration* EntityDeclarations:EntityDeclaration* Diagnostics:Diagnostic*;
ConcreteCallableDeclaration: CallableDeclaration = Body;
ConcreteMethodDeclaration: MethodDeclaration, ConcreteCallableDeclaration;
ConstructorDeclaration: MemberDeclaration, ConcreteCallableDeclaration = ImplicitSelfParameter:SelfParameter SelfParameterType:DataType? NewParameters:ConstructorParameter;
ConstructorParameter: Parameter;
Declaration = File:CodeFile NameSpan:TextSpan;
ElseClause;
EntityDeclaration: Declaration = AccessModifier:IAccessModifierToken?;
ExpressionStatement: BodyStatement = Expression;
Expression = Type:DataType? Semantics:ExpressionSemantics?;
FieldAccessExpression: AssignableExpression = ContextExpression:Expression AccessOperator Field:NameExpression ReferencedBinding:IBindingMetadata?;
FieldDeclaration: MemberDeclaration = TypeSyntax:Type Type:DataTypePromise Initializer:Expression?;
FieldParameter: ConstructorParameter = FieldName:SimpleName DefaultValue:Expression?;
ForeachExpression: Expression = VariableName:SimpleName VariableIsLiveAfterAssignment:bool TypeSyntax:Type Type:DataType? VariableType:DataType? InExpression:Expression Block:BlockExpression;
FunctionDeclaration: NonMemberEntityDeclaration, ConcreteCallableDeclaration = IsExternalFunction:bool NewParameters:NamedParameter* ReturnTypeSyntax:Type? ReturnType:DataTypePromise;
IfExpression: Expression, ElseClause = Condition:Expression ThenBlock:BlockOrResult ElseClause;
ImplicitConversionExpression: Expression = Expression Type:DataType;
ImplicitImmutabilityConversionExpression: ImplicitConversionExpression;
ImplicitNoneConversionExpression: ImplicitConversionExpression;
ImplicitNumericConversionExpression: ImplicitConversionExpression = ConvertToType:NumericType;
ImplicitOptionalConversionExpression: ImplicitConversionExpression = ConvertToType:OptionalType;
IntegerLiteralExpression: LiteralExpression = Value:BigInteger;
InvocationExpression: Expression = FullName:Name Arguments:Argument*;
LiteralExpression: Expression;
LoopExpression: Expression = Block:BlockExpression;
MemberDeclaration: EntityDeclaration = DeclaringClass:ClassDeclaration Name:SimpleName;
MethodDeclaration: MemberDeclaration, CallableDeclaration = SelfParameter SelfParameterType:DataType? NewParameters:Parameter* ReturnTypeSyntax:Type ReturnType:DataTypePromise;
MethodInvocationExpression: InvocationExpression = ContextExpression:Expression MethodNameSyntax:CallableName;
MoveExpression: Expression = Referent:Expression MovedSymbol:IBindingMetadata?;
NamedParameter: Parameter, ConstructorParameter = TypeSyntax:Type DefaultValue:Expression?;
NameExpression: AssignableExpression, IHasContainingScope = Name:SimpleName ReferencedBinding:IBindingMetadata? VariableIsLiveAfter:bool;
NamespaceDeclaration: NonMemberDeclaration, Declaration = IsGlobalQualified:bool Name FullName:Name UsingDirectives:UsingDirective* Declarations:NonMemberDeclaration*;
NewObjectExpression: Expression = TypeSyntax:TypeName ConstructorName:CallableName? Arguments:Argument* ReferencedConstructor:IFunctionMetadata?;
NextExpression: Expression;
NoneLiteralExpression: LiteralExpression;
NonMemberDeclaration: Declaration;
NonMemberEntityDeclaration: EntityDeclaration, NonMemberDeclaration;
OptionalType: Type = Referent:Type;
Parameter: 'ISyntax', IBindingMetadata = Name:SimpleName Unused:bool Type:DataTypePromise;
ReachabilityAnnotation;
ReachableFromAnnotation: ReachabilityAnnotation = ReachableFrom:NameExpression;
ResultStatement: Statement, BlockOrResult = Expression;
ReturnExpression: Expression = ReturnValue:Expression?;
SelfExpression: Expression, IHasContainingScope = IsImplicit:bool ReferencedBinding:IBindingMetadata?;
SelfParameter: Parameter = MutableSelf:bool;
ShareExpression: Expression = Referent:Expression SharedSymbol:IBindingMetadata;
Statement;
StringLiteralExpression: LiteralExpression = Value:string;
TypeName: Type, IHasContainingScope = ReferencedType:IMetadata?;
Type = NamedType:DataType?;
UnaryOperatorExpression: Expression = Fixity:UnaryOperatorFixity Operator:UnaryOperator Operand:Expression;
UnsafeExpression: Expression = Expression;
UsingDirective = Name;
VariableDeclarationStatement: BodyStatement, IBindingMetadata = NameSpan:TextSpan Name:SimpleName TypeSyntax:Type? Type:DataType? InferMutableType:bool Initializer:Expression? VariableIsLiveAfter:bool;
WhileExpression: Expression = Condition:Expression Block:BlockExpression;
