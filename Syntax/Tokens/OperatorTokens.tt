<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var operators = new List<string>()
    {
        "Dot", // `.` U+002E
        "DotDot", // `..` U+002E, U+002E
        "AtSign", // `@` U+0040 (named at sign to distinguish it from the word "at")
        "Caret", // `^` U+005E
        "CaretDot", // `^.` U+005E, U+002E
        "Plus", // `+` U+002B
        "Minus", // `-` U+002D
        "Asterisk", // `*` U+002A
        "Slash", // `/` U+002F
        "Equals", // `=` U+003D
        "EqualsEquals", // `==` U+003D", U+003D
        "NotEqual", // `≠` U+2260, `=/=` U+003D, U+002F, U+003D
        "GreaterThan", // `>` U+003E
        "GreaterThanOrEqual", // `≥` U+2265", `⩾` U+2A7E", `>=` U+003E", U+003D
        "LessThan", // `<` U+003C
        "LessThanOrEqual", // `≤` U+2264", `⩽` U+2A7D", `<=` U+003C", U+003D
        "PlusEquals", // `+=` U+002B", U+003D
        "MinusEquals", // `-=` U+002D", U+003D
        "AsteriskEquals", // `*=` U+002A", U+003D
        "SlashEquals", // `/=` U+002F", U+003D
        "Dollar", // `$` U+0024
        "DollarLessThan", // `$<≠` U+0024, U+003C, U+2260, `$</=` U+0024, U+003C, U+002F, U+003D
        "DollarLessThanNotEqual", // `$<` U+0024, U+003C
        "DollarGreaterThan", // `$>` U+0024, U+003E
        "DollarGreaterThanNotEqual", // `$>≠` U+0024, U+003E, U+2260, `$>/=` U+0024, U+003E, U+002F, U+003D
        "Question", // `?` U+003F
        "QuestionQuestion", // `??` U+003F, U+003F
        "QuestionDot", // `?.` U+003F, U+002E
        "LessThanColon" , // `<:` U+003C, U+003A
        "EqualsGreaterThan" , // `=>` U+003D, U+003E
    }.AsReadOnly();
#>
using Adamant.Tools.Compiler.Bootstrap.Core;

namespace Adamant.Tools.Compiler.Bootstrap.Syntax.Tokens
{
<# foreach(var @operator in operators) {#>
    public partial interface I<#=@operator#>Token : IOperatorToken { }
    public class <#=@operator#>Token : OperatorToken, I<#=@operator#>Token
    {
        public <#=@operator#>Token(TextSpan span)
            : base(span)
        {
        }
    }

<#}#>
    public partial class MissingToken :
<# foreach(var @operator in operators) {#>
        I<#=@operator#>Token,
<#}#>
        IOperatorToken // Implied, but saves issues with commas
    { }
}
