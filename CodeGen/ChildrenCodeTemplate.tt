<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Collections.Generic;
<#  foreach(var usingNamespace in grammar.UsingNamespaces)
    { #>
using <#=usingNamespace #>;
<#  } #>
using ExhaustiveMatching;

namespace <#=grammar.Namespace #>
{
    [GeneratedCode("AdamantCompilerCodeGen", null)]
    public static class <#=TypeName(grammar.BaseType)#>Extensions
    {
        [DebuggerStepThrough]
        public static IEnumerable<<#=TypeName(grammar.BaseType)#>> Children(this <#=TypeName(grammar.BaseType)#> node)
        {
            switch(node)
            {
                default:
                    throw ExhaustiveMatch.Failed(node);
<#  foreach(var rule in grammar.Rules.Where(IsLeaf)) { #>
                case <#=TypeName(rule.Nonterminal) #> n:
<#      foreach(var property in rule.Properties.Where(IsNonTerminal)) { #>
<#          if(property.IsList) { #>
                    foreach(var child in n.<#=property.Name #>)
                        yield return child;
<#          } else if(property.IsOptional) { #>
                    if(!(n.<#=property.Name #> is null))
                        yield return n.<#=property.Name #>;
<#          } else { #>
                    yield return n.<#=property.Name #>;
<#          } #>
<#      } #>
                    yield break;
<#  } #>
            }
        }
    }
}
