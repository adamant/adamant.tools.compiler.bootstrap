using System.Diagnostics;
using Adamant.Tools.Compiler.Bootstrap.Core;
using Adamant.Tools.Compiler.Bootstrap.CST;
using Adamant.Tools.Compiler.Bootstrap.Tokens;
using Adamant.Tools.Compiler.Bootstrap.Types;

namespace Adamant.Tools.Compiler.Bootstrap.Semantics.Basic.ImplicitOperations
{
    /// <summary>
    /// The implicit conversions do not have "Syntax" in their name, because
    /// there is no corresponding syntax. They are never generated by the parser,
    /// but are inserted during type checking.
    /// </summary>
    internal abstract class ImplicitConversionExpression : ImplicitExpressionSyntax, IImplicitConversionExpression
    {
        public IExpressionSyntax Expression { [DebuggerHidden] get; }
        DataType IImplicitConversionExpression.Type { [DebuggerHidden] get => Type!; }

        protected ImplicitConversionExpression(
            TextSpan span,
            DataType convertToType,
            IExpressionSyntax expression,
            ExpressionSemantics semantics)
            : base(convertToType, span, semantics)
        {
            Expression = expression;
        }

        public abstract override string ToString();

        public string ToGroupedString(OperatorPrecedence surroundingPrecedence)
        {
            return ToString();
        }
    }
}
