<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var keywords = new List<string>()
    {
        "Published",
        "Public",
        "Protected",
        "Private",
        "Let",
        "Var",
        "Void",
        "Int",
        "UInt",
        "Byte",
        "Size",
        "Bool",
        "String",
        "Never",
        "Return",
        "Class",
        "Function",
        "New",
        "Init",
        "Delete",
        "Owned",
        "Namespace",
        "Using",
        "Foreach",
        "In",
        "If",
        "Else",
        "Struct",
        "Enum",
        "Unsafe",
        "Safe",
        "Self",
        "SelfType",
        "Base",
        "Extend",
        "Type",
        "Metatype",
        "Mutable",
        "Params",
        "May",
        "No",
        "Throw",
        "Ref",
        "Abstract",
        "Get",
        "Set",
        "Requires",
        "Ensures",
        "Invariant",
        "Where",
        "Const",
        "Alias",
        "Uninitialized",
        "None",
        "Operator",
        "Implicit",
        "Explicit",
        "Move",
        "Copy",
        "Match",
        "Loop",
        "While",
        "Break",
        "Next",
        "Override",
        "Any",
        "True",
        "False",
        "As",
        "And",
        "Or",
        "Xor",
        "Not",
        "Trait",
    }.AsReadOnly();
#>
using System;
using System.Collections.Generic;
using Adamant.Tools.Compiler.Bootstrap.Core;
using Adamant.Tools.Compiler.Bootstrap.Framework;
using JetBrains.Annotations;

namespace Adamant.Tools.Compiler.Bootstrap.Tokens
{
    public static partial class TokenTypes
    {
        [NotNull, ItemNotNull]
        private static readonly IReadOnlyList<Type> Keyword = new List<Type>()
        {
<# foreach(var keyword in keywords) {#>
            typeof(<#=keyword#>KeywordToken),
<#}#>
        }.AsReadOnly().NotNull();
    }

    public static partial class TokenFactory
    {
<# foreach(var keyword in keywords) {#>
        [NotNull]
        public static I<#=keyword#>KeywordToken <#=keyword#>Keyword(TextSpan span)
        {
            return new <#=keyword#>KeywordToken(span);
        }

<#}#>
    }
<# foreach(var keyword in keywords) {#>

    public partial interface I<#=keyword#>KeywordToken : IKeywordToken { }
    internal partial class <#=keyword#>KeywordToken : Token, I<#=keyword#>KeywordToken
    {
        public <#=keyword#>KeywordToken(TextSpan span)
            : base(span)
        {
        }
    }
<#}#>
}
