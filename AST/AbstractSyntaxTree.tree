◊namespace Adamant.Tools.Compiler.Bootstrap.AST;
◊base 'IAbstractSyntax';
◊prefix I;
◊list FixedList;
◊using Adamant.Tools.Compiler.Bootstrap.Core;
◊using Adamant.Tools.Compiler.Bootstrap.Framework;
◊using Adamant.Tools.Compiler.Bootstrap.Symbols;

'IAbstractSyntax' = Span:'TextSpan';

// ---------- Bindings
Binding = Symbol:'BindingSymbol';
LocalBinding: Binding;

// ---------- Declarations
// Note: in the AST all declarations are entities because there are no namespace declarations
Declaration = Symbol:'Symbol';
/// A declaration that could contain executable code (i.e. invocable declaration or field declaration)
ExecutableDeclaration: Declaration;
InvocableDeclaration: ExecutableDeclaration = Parameters:ConstructorParameter*;
ConcreteInvocableDeclaration: InvocableDeclaration = Body;

// ---------- Non-Member Declarations
NonMemberDeclaration: Declaration;
ClassDeclaration: NonMemberDeclaration = Symbol:'ObjectTypeSymbol' Members:MemberDeclaration*;
FunctionDeclaration: NonMemberDeclaration = Symbol:'FunctionSymbol' Parameters:NamedParameter* Body;

// ---------- Member Declarations
MemberDeclaration: Declaration;
MethodDeclaration: MemberDeclaration = Symbol:'MethodSymbol' SelfParameter Parameters:NamedParameter*;
AbstractMethodDeclaration: MethodDeclaration = SelfParameter Parameters:NamedParameter*;
ConcreteMethodDeclaration: MethodDeclaration, ConcreteInvocableDeclaration = SelfParameter Parameters:NamedParameter* Body;
ConstructorDeclaration: MemberDeclaration, ConcreteInvocableDeclaration = Symbol:'ConstructorSymbol' ImplicitSelfParameter:SelfParameter Parameters:ConstructorParameter* Body;
FieldDeclaration: MemberDeclaration, ExecutableDeclaration, Binding = Symbol:'FieldSymbol';
AssociatedFunctionDeclaration: MemberDeclaration, ConcreteInvocableDeclaration = Symbol:'FunctionSymbol' Parameters:NamedParameter* Body;

// ---------- Parameters --------------
Parameter = Unused:'bool';
/// A parameter that can be declared in a constructor
ConstructorParameter: Parameter;
/// A parameter that creates a binding, i.e. a named or self parameter
BindingParameter: Parameter, LocalBinding;
NamedParameter: Parameter, ConstructorParameter, BindingParameter = Symbol:'VariableSymbol' DefaultValue:Expression?;
SelfParameter: Parameter, BindingParameter = Symbol:'SelfParameterSymbol';
FieldParameter: Parameter, ConstructorParameter = ReferencedSymbol:'FieldSymbol' DefaultValue:Expression?;


// ---------- Function Parts
Body;

// ---------- Expressions
Expression;
